"""Contains a tool that guarantees every name in the project will be unique."""


class CentralNameGen:
    """Important: Create ONE instance of this object in your highest level Python
    module, and pass that instance into every object.

    There are both pros and cons to guaranteeing unique port names. Give some
    thought to whether you really want:

        my_output_port_n000001 => some_signal_n432998,
        ...
        my_output_port_n999999 => some_other_signal_n264310

    It is indispensable for some situations, but if the number of outputs
    changes, and ports are inherently different things, regret may be engendered.

    This module is most likely to be useful when you have a large number of
    the same thing, but they are just time delayed versions of each other.

    The number field starts with 'n', which simply stands for "number".
    For example:
        signal      some_name_n000001 : std_logic_vector(7 downto 0);
        signal      some_other_name_n000002 : std_logic_vector(15 downto 0);
    Making the number field start with _n makes it easier to machine-parse
    names generated by this class. 

    When generating a name, you can optionally include the delay_num keyword.
    Its purpose is to include the time delay relative to some datum, such as
    an input in some entity. This can be useful if you want to document the
    latency (in clock cycles) that some signal will change values relative
    to an input port in some entity. This field, if it exists, starts with
    'd'."""
    def __init__(self, **kwargs):
        self.num = 0
        if "num_digits" in kwargs:
            self.format_str = "%0"
            self.format_str += str(kwargs["num_digits"])
            self.format_str += "d"
            self.num_digits = kwargs["num_digits"]
        else:
            self.format_str = "%06d"
            self.num_digits = 6

    def get_one_name(self, name_stub, *args, **kwargs):
        self.num += 1

        # Guarantee that the resulting number field will fit in the allotted number of digits:
        assert(len(str(self.num)) <= self.num_digits)

        one_name = name_stub + "_n" + (self.format_str % self.num)

        if "delay_num" in kwargs:
            one_name += "_d" + (self.format_str % kwargs["delay_num"])

        if "signal" in args:
            one_name += "_s"
        elif "input" in args:
            one_name += "_i"
        elif "output" in args:
            one_name += "_o"
        return one_name


if __name__ == "__main__":
    uut = CentralNameGen()
    for m in range(10):
        print(uut.get_one_name(name_stub="whatever_signal"))
    for m in range(10):
        print(uut.get_one_name(name_stub="some_other_signal"))

    uut = CentralNameGen(num_digits=8)
    uut.num = 99462384
    for m in range(10):
        print(uut.get_one_name(name_stub="some_sig", delay_num=889472))
